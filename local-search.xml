<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数论</title>
    <link href="/2023/02/20/%E6%95%B0%E8%AE%BA/"/>
    <url>/2023/02/20/%E6%95%B0%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="初等数论"><a href="#初等数论" class="headerlink" title="初等数论"></a>初等数论</h1><h2 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sieve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m = (<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(n + <span class="hljs-number">0.5</span>);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * i;j &lt;= n;j += i)<br>                vis[j] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gen_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sieve</span>(n);<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;++i)<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>            prime[c++] = i;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<span class="hljs-comment">//返回小于等于n的素数个数</span><br></code></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">egcd</span><span class="hljs-params">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123; d = a;x = <span class="hljs-number">1</span>;y = <span class="hljs-number">0</span>; &#125;<br>    <span class="hljs-keyword">else</span> &#123; <span class="hljs-built_in">egcd</span>(b, a % b, d, y, x);y -= x * (a / b); &#125;<br>&#125;<span class="hljs-comment">//扩展gcd算法，d是最大公约数，ax+by=d，其中|x|+|y|最小</span><br></code></pre></td></tr></table></figure><p>存在方程$ax+by&#x3D;c$，且 $x,y,c$ 为整数<br>上述方程有解的充要条件是 $gcd(a,b)|c$ （裴蜀定理）,利用扩展欧几里得算法可以求得方程的解<br>若其中一组解为  $(x_0,y_0)$ ,它的任意整数解都可以写成 $(x_0+kb’,y_0-ka’)$ ,其中 $a’&#x3D;a&#x2F;gcd(a,b),b’&#x3D;b&#x2F;gcd(a,b)$</p><h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">inv</span><span class="hljs-params">(ll a, ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll d, x, y;<br>    <span class="hljs-built_in">egcd</span>(a, n, d, x, y);<br>    <span class="hljs-keyword">return</span> d == <span class="hljs-number">1</span> ? (x + n) % n : <span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-comment">//计算模n下a的逆</span><br></code></pre></td></tr></table></figure><p>若存在 $a^{-1}$ ，使得 $a*a^{-1}\equiv 1\pmod n$，则称 $a^{-1}$为 $a$ 模 $n$ 下的逆</p><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p>$phi(i)&#x3D; n(1-\frac 1{p_1})(1-\frac 1{p_2})…(1-\frac 1{p_k})$<br>其中， $p$ 为 $i$ 的质因数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m = (<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(n + <span class="hljs-number">0.5</span>);<br>    <span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= m;++i)<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>)<br>                n /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>        ans = ans / n * (n - <span class="hljs-number">1</span>);<br>&#125;<span class="hljs-comment">//欧拉函数等于不超过n且和n互素的整数个数</span><br></code></pre></td></tr></table></figure><h2 id="欧拉定理求乘法逆元"><a href="#欧拉定理求乘法逆元" class="headerlink" title="欧拉定理求乘法逆元"></a>欧拉定理求乘法逆元</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function">ll <span class="hljs-title">eulerinv</span><span class="hljs-params">(ll a, ll n)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t = <span class="hljs-built_in">pow</span>(a, <span class="hljs-built_in">phi</span>(n) - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> t % n;<br>&#125;<span class="hljs-comment">//a与n互质，计算模n下a的逆</span><br></code></pre></td></tr></table></figure><p>欧拉定理：若a与n互质，则 $a^{phi(n)}\equiv 1\pmod n$</p><h2 id="用类似素数筛的方法计算欧拉函数表"><a href="#用类似素数筛的方法计算欧拉函数表" class="headerlink" title="用类似素数筛的方法计算欧拉函数表"></a>用类似素数筛的方法计算欧拉函数表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">phi_table</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;++i)<br>        <span class="hljs-keyword">if</span> (!phi[i])<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i;j &lt;= n;j += i)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!phi[j])<br>                    phi[j] = j;<br>                phi[j] = phi[j] / i * (i - <span class="hljs-number">1</span>);<br>            &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>算法笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
      <tag>素数筛</tag>
      
      <tag>扩展欧几里得算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/20/hello-world/"/>
    <url>/2023/02/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
